{"ast":null,"code":"import { v1 } from \"uuid\";\nimport { useState } from \"react\";\nlet state = {\n  profilePage: {\n    posts: [{\n      id: v1(),\n      messagePost: 'Hi! Like my post!',\n      count: 1\n    }, {\n      id: v1(),\n      messagePost: 'Like my post!',\n      count: 15\n    }, {\n      id: v1(),\n      messagePost: 'Hi! Like my!',\n      count: 22\n    }, {\n      id: v1(),\n      messagePost: 'Like!',\n      count: 2\n    }]\n  },\n  dialogsPage: {\n    usersData: [{\n      id: ':DIALOG1',\n      name: 'Vatsok'\n    }, {\n      id: ':DIALOG2',\n      name: 'Goshan'\n    }, {\n      id: ':DIALOG3',\n      name: 'Ivan'\n    }, {\n      id: ':DIALOG4',\n      name: 'Dre Dr'\n    }],\n    messagesData: [{\n      id: 1,\n      message: 'Ho'\n    }, {\n      id: 2,\n      message: 'Hi'\n    }, {\n      id: 3,\n      message: 'Hoo'\n    }, {\n      id: 4,\n      message: 'Hm'\n    }]\n  }\n};\nconst [myMessage, setMyMessage] = useState(\"\");\nconst [myPosts, setMyPosts] = useState(props.posts);\nconst [error, setError] = useState(\"Введите текст!!\");\nconst addPost = () => {\n  const newPost = {\n    id: v1(),\n    messagePost: myMessage,\n    count: 0\n  };\n  if (myMessage.length < 1) {\n    return alert(error);\n  }\n  setMyPosts([newPost, ...myPosts]);\n  setMyMessage('');\n};\nconst removePost = id => {\n  setMyPosts(myPosts.filter(post => post.id !== id));\n};\nconst onChangePostMessage = event => {\n  setMyMessage(event.currentTarget.value);\n};\nexport default state;","map":{"version":3,"names":["v1","useState","state","profilePage","posts","id","messagePost","count","dialogsPage","usersData","name","messagesData","message","myMessage","setMyMessage","myPosts","setMyPosts","props","error","setError","addPost","newPost","length","alert","removePost","filter","post","onChangePostMessage","event","currentTarget","value"],"sources":["/Users/uladzimir/Desktop/My Folders/INCUBATOR/iamsocial/src/redux/state.ts"],"sourcesContent":["import {v1} from \"uuid\";\nimport {ChangeEvent, useState} from \"react\";\n\nexport type PostType = {\n    id: string,\n    messagePost: string,\n    count: number\n}\nexport type UserType = {\n    id: string,\n    name: string\n}\nexport type MessageType = {\n    id: number,\n    message: string\n}\nexport type ProfilePageType = {\n    posts: PostType[]\n}\nexport type DialogPageType = {\n    usersData: UserType[]\n    messagesData: MessageType[]\n}\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogPageType\n}\n\nlet state: RootStateType = {\n    profilePage: {\n        posts: [\n            {id: v1(), messagePost: 'Hi! Like my post!', count: 1},\n            {id: v1(), messagePost: 'Like my post!', count: 15},\n            {id: v1(), messagePost: 'Hi! Like my!', count: 22},\n            {id: v1(), messagePost: 'Like!', count: 2},\n        ],\n    },\n\n    dialogsPage: {\n        usersData: [\n            {id: ':DIALOG1', name: 'Vatsok'},\n            {id: ':DIALOG2', name: 'Goshan'},\n            {id: ':DIALOG3', name: 'Ivan'},\n            {id: ':DIALOG4', name: 'Dre Dr'},\n        ],\n        messagesData: [\n            {id: 1, message: 'Ho'},\n            {id: 2, message: 'Hi'},\n            {id: 3, message: 'Hoo'},\n            {id: 4, message: 'Hm'},\n        ],\n    }\n\n}\n\n\nconst [myMessage, setMyMessage] = useState(\"\");\nconst [myPosts, setMyPosts] = useState<PostType[]>(props.posts);\nconst [error, setError] = useState(\"Введите текст!!\");\n\n\nconst addPost = () => {\n    const newPost = {id: v1(), messagePost: myMessage, count: 0}\n    if (myMessage.length < 1) {\n        return alert(error)\n    }\n    setMyPosts([newPost, ...myPosts])\n    setMyMessage('')\n\n};\n\nconst removePost = (id: string) => {\n    setMyPosts(myPosts.filter(post => post.id !== id));\n};\n\n\nconst onChangePostMessage = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setMyMessage(event.currentTarget.value)\n}\n\n\n\nexport default state;"],"mappings":"AAAA,SAAQA,EAAE,QAAO,MAAM;AACvB,SAAqBC,QAAQ,QAAO,OAAO;AA2B3C,IAAIC,KAAoB,GAAG;EACvBC,WAAW,EAAE;IACTC,KAAK,EAAE,CACH;MAACC,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,mBAAmB;MAAEC,KAAK,EAAE;IAAC,CAAC,EACtD;MAACF,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAE,CAAC,EACnD;MAACF,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,cAAc;MAAEC,KAAK,EAAE;IAAE,CAAC,EAClD;MAACF,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAC,CAAC;EAElD,CAAC;EAEDC,WAAW,EAAE;IACTC,SAAS,EAAE,CACP;MAACJ,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAQ,CAAC,EAChC;MAACL,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAQ,CAAC,EAChC;MAACL,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAM,CAAC,EAC9B;MAACL,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAQ,CAAC,CACnC;IACDC,YAAY,EAAE,CACV;MAACN,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAI,CAAC,EACtB;MAACP,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAI,CAAC,EACtB;MAACP,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAK,CAAC,EACvB;MAACP,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAI,CAAC;EAE9B;AAEJ,CAAC;AAGD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;AAC9C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAagB,KAAK,CAACb,KAAK,CAAC;AAC/D,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,iBAAiB,CAAC;AAGrD,MAAMmB,OAAO,GAAGA,CAAA,KAAM;EAClB,MAAMC,OAAO,GAAG;IAAChB,EAAE,EAAEL,EAAE,CAAC,CAAC;IAAEM,WAAW,EAAEO,SAAS;IAAEN,KAAK,EAAE;EAAC,CAAC;EAC5D,IAAIM,SAAS,CAACS,MAAM,GAAG,CAAC,EAAE;IACtB,OAAOC,KAAK,CAACL,KAAK,CAAC;EACvB;EACAF,UAAU,CAAC,CAACK,OAAO,EAAE,GAAGN,OAAO,CAAC,CAAC;EACjCD,YAAY,CAAC,EAAE,CAAC;AAEpB,CAAC;AAED,MAAMU,UAAU,GAAInB,EAAU,IAAK;EAC/BW,UAAU,CAACD,OAAO,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACrB,EAAE,KAAKA,EAAE,CAAC,CAAC;AACtD,CAAC;AAGD,MAAMsB,mBAAmB,GAAIC,KAAuC,IAAK;EACrEd,YAAY,CAACc,KAAK,CAACC,aAAa,CAACC,KAAK,CAAC;AAC3C,CAAC;AAID,eAAe5B,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}