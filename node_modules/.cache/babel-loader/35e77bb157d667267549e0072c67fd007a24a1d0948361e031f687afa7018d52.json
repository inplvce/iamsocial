{"ast":null,"code":"var _s = $RefreshSig$();\nimport { v1 } from \"uuid\";\nimport { useState } from \"react\";\n\n// Типы данных\n\nconst initialState = {\n  profilePage: {\n    posts: [{\n      id: v1(),\n      messagePost: 'Hi! Like my post!',\n      count: 1\n    }, {\n      id: v1(),\n      messagePost: 'Like my post!',\n      count: 15\n    }, {\n      id: v1(),\n      messagePost: 'Hi! Like my!',\n      count: 22\n    }, {\n      id: v1(),\n      messagePost: 'Like!',\n      count: 2\n    }]\n  },\n  dialogsPage: {\n    usersData: [{\n      id: ':DIALOG1',\n      name: 'Vatsok'\n    }, {\n      id: ':DIALOG2',\n      name: 'Goshan'\n    }, {\n      id: ':DIALOG3',\n      name: 'Ivan'\n    }, {\n      id: ':DIALOG4',\n      name: 'Dre Dr'\n    }],\n    messagesData: [{\n      id: 1,\n      message: 'Ho'\n    }, {\n      id: 2,\n      message: 'Hi'\n    }, {\n      id: 3,\n      message: 'Hoo'\n    }, {\n      id: 4,\n      message: 'Hm'\n    }]\n  }\n};\n\n// Хук для использования состояния и функций\nexport const useAppState = () => {\n  _s();\n  const [state, setState] = useState(initialState);\n  const addPost = messagePost => {\n    const newPost = {\n      id: v1(),\n      messagePost: messagePost,\n      count: 0\n    };\n    setState(prevState => ({\n      ...prevState,\n      profilePage: {\n        ...prevState.profilePage,\n        posts: [...prevState.profilePage.posts, newPost]\n      }\n    }));\n  };\n  return {\n    state,\n    addPost\n  };\n};\n_s(useAppState, \"2/eSVXfk2V5ZKttKXeUPXMa6Sd8=\");","map":{"version":3,"names":["v1","useState","initialState","profilePage","posts","id","messagePost","count","dialogsPage","usersData","name","messagesData","message","useAppState","_s","state","setState","addPost","newPost","prevState"],"sources":["/Users/uladzimir/Desktop/My Folders/INCUBATOR/iamsocial/src/redux/state.tsx"],"sourcesContent":["import { v1 } from \"uuid\";\nimport { useState } from \"react\";\n\n// Типы данных\ntype UserDataType = {\n    id: string;\n    name: string;\n};\n\ntype MessageDataType = {\n    id: number;\n    message: string;\n};\n\ntype DialogPageType = {\n    usersData: UserDataType[];\n    messagesData: MessageDataType[];\n};\n\ntype PostsType = {\n    id: string;\n    messagePost: string;\n    count: number;\n};\n\ntype ProfilePageType = {\n    posts: PostsType[];\n};\n\nexport type StateType = {\n    profilePage: ProfilePageType;\n    dialogsPage: DialogPageType;\n};\n\nconst initialState: StateType = {\n    profilePage: {\n        posts: [\n            { id: v1(), messagePost: 'Hi! Like my post!', count: 1 },\n            { id: v1(), messagePost: 'Like my post!', count: 15 },\n            { id: v1(), messagePost: 'Hi! Like my!', count: 22 },\n            { id: v1(), messagePost: 'Like!', count: 2 },\n        ],\n    },\n    dialogsPage: {\n        usersData: [\n            { id: ':DIALOG1', name: 'Vatsok' },\n            { id: ':DIALOG2', name: 'Goshan' },\n            { id: ':DIALOG3', name: 'Ivan' },\n            { id: ':DIALOG4', name: 'Dre Dr' },\n        ],\n        messagesData: [\n            { id: 1, message: 'Ho' },\n            { id: 2, message: 'Hi' },\n            { id: 3, message: 'Hoo' },\n            { id: 4, message: 'Hm' },\n        ],\n    }\n};\n\n// Хук для использования состояния и функций\nexport const useAppState = () => {\n    const [state, setState] = useState<StateType>(initialState);\n\n    const addPost = (messagePost: string) => {\n        const newPost: PostsType = {\n            id: v1(),\n            messagePost: messagePost,\n            count: 0\n        };\n        setState(prevState => ({\n            ...prevState,\n            profilePage: {\n                ...prevState.profilePage,\n                posts: [...prevState.profilePage.posts, newPost]\n            }\n        }));\n    };\n\n    return { state, addPost };\n};"],"mappings":";AAAA,SAASA,EAAE,QAAQ,MAAM;AACzB,SAASC,QAAQ,QAAQ,OAAO;;AAEhC;;AA+BA,MAAMC,YAAuB,GAAG;EAC5BC,WAAW,EAAE;IACTC,KAAK,EAAE,CACH;MAAEC,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,mBAAmB;MAAEC,KAAK,EAAE;IAAE,CAAC,EACxD;MAAEF,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAG,CAAC,EACrD;MAAEF,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,cAAc;MAAEC,KAAK,EAAE;IAAG,CAAC,EACpD;MAAEF,EAAE,EAAEL,EAAE,CAAC,CAAC;MAAEM,WAAW,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAE,CAAC;EAEpD,CAAC;EACDC,WAAW,EAAE;IACTC,SAAS,EAAE,CACP;MAAEJ,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAS,CAAC,EAClC;MAAEL,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAS,CAAC,EAClC;MAAEL,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAO,CAAC,EAChC;MAAEL,EAAE,EAAE,UAAU;MAAEK,IAAI,EAAE;IAAS,CAAC,CACrC;IACDC,YAAY,EAAE,CACV;MAAEN,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAK,CAAC,EACxB;MAAEP,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAK,CAAC,EACxB;MAAEP,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAM,CAAC,EACzB;MAAEP,EAAE,EAAE,CAAC;MAAEO,OAAO,EAAE;IAAK,CAAC;EAEhC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAYC,YAAY,CAAC;EAE3D,MAAMe,OAAO,GAAIX,WAAmB,IAAK;IACrC,MAAMY,OAAkB,GAAG;MACvBb,EAAE,EAAEL,EAAE,CAAC,CAAC;MACRM,WAAW,EAAEA,WAAW;MACxBC,KAAK,EAAE;IACX,CAAC;IACDS,QAAQ,CAACG,SAAS,KAAK;MACnB,GAAGA,SAAS;MACZhB,WAAW,EAAE;QACT,GAAGgB,SAAS,CAAChB,WAAW;QACxBC,KAAK,EAAE,CAAC,GAAGe,SAAS,CAAChB,WAAW,CAACC,KAAK,EAAEc,OAAO;MACnD;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,OAAO;IAAEH,KAAK;IAAEE;EAAQ,CAAC;AAC7B,CAAC;AAACH,EAAA,CAnBWD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}