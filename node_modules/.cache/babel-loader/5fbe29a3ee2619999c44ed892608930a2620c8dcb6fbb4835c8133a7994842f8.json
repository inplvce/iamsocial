{"ast":null,"code":"import './index.css';\nimport { renderThree } from \"./render\";\n\n// export const dataState = () => {\n//\n//\n//     const [myMessage, setMyMessage] = useState(\"\");\n//     const [myPosts, setMyPosts] = useState<PostType[]>(props.posts);\n//     const [error, setError] = useState(\"Введите текст!!\");\n//\n//\n//     const addPost = () => {\n//         const newPost = {id: v1(), messagePost: myMessage, count: 0}\n//         if (myMessage.length < 1) {\n//             return alert(error)\n//         }\n//         setMyPosts([newPost, ...myPosts])\n//         setMyMessage('')\n//\n//     };\n//\n//     const removePost = (id: string) => {\n//         setMyPosts(myPosts.filter(post => post.id !== id));\n//     };\n//\n//\n//     const onChangePostMessage = (event: ChangeEvent<HTMLTextAreaElement>) => {\n//         setMyMessage(event.currentTarget.value)\n//     }\n//\n// }\nrenderThree();","map":{"version":3,"names":["renderThree"],"sources":["/Users/uladzimir/Desktop/My Folders/INCUBATOR/iamsocial/src/index.tsx"],"sourcesContent":["import './index.css';\nimport {renderThree} from \"./render\";\n\n\n\n// export const dataState = () => {\n//\n//\n//     const [myMessage, setMyMessage] = useState(\"\");\n//     const [myPosts, setMyPosts] = useState<PostType[]>(props.posts);\n//     const [error, setError] = useState(\"Введите текст!!\");\n//\n//\n//     const addPost = () => {\n//         const newPost = {id: v1(), messagePost: myMessage, count: 0}\n//         if (myMessage.length < 1) {\n//             return alert(error)\n//         }\n//         setMyPosts([newPost, ...myPosts])\n//         setMyMessage('')\n//\n//     };\n//\n//     const removePost = (id: string) => {\n//         setMyPosts(myPosts.filter(post => post.id !== id));\n//     };\n//\n//\n//     const onChangePostMessage = (event: ChangeEvent<HTMLTextAreaElement>) => {\n//         setMyMessage(event.currentTarget.value)\n//     }\n//\n// }\nrenderThree()\n"],"mappings":"AAAA,OAAO,aAAa;AACpB,SAAQA,WAAW,QAAO,UAAU;;AAIpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}